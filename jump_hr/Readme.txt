1.添加程序计分规则，记录分数和跳的台子数。(完成)
2.使用定时器实现自动跳台子，添加成功概率。
（1）设计每一种概率下游戏的模拟。
（2）需要输出的函数变量有：初始概率，总台子数，成功概率在0.5以上的台子数，计算的GR值
3.记录数据输出表格，打印表格作为面谈基础，面谈所要谈的事情参照word文档上写的。
（3）找到对应概率的指数函数，对比分析。（如果每次概率不一样就不用管指数函数了）

注意点：


        调整下落位置的判定。(
	        下落位置判定的bug：应为方块会随机在左边或者右边出现，在左边出现只会比较X轴的距离，在右边出现只会比较Z轴的距离。
	        所以当方块左右变化的时候只要对应的X或者Z轴的距离符合要求，就不会被判定为掉落，即使落在小方块外面，只要对应X或Z轴的距离
	        符合要求就可以。当方块大小是随机的，因为小方块跳的时候不会自己调整角度，只会机械的沿着X或Z轴跳，就会出现这种状况，方块大小一致就不会有这种问题。
        )
        自动跳台子bug：
		//游戏结束需要停止√
		//点击停止按钮需要停止√
		// 重复点击表单会加快定时器，需要清空一下定时器(用户体验类)√
		// 手动介入时停止定时器(用户体验类)可以尝试用当自动模拟时，加遮罩层禁止手动介入来解决。


台子数已记录。

目前提出问题：
1.从一个台子跳到另一个台子的概率一直是一样的么？
实际上不一样，理论上个人认为跟下一个台子的面积和台子的距离有关系，目前设计每个台子的面积都是4X4的。不设计成大小不一样的是因为上面的bug不好解决。
至于距离不一样，可以根据距离去设计和初始水平去设计概率。
2.如果概率一样的话可以设计初始概率， 后面的概率都是一样的。
这样的话直接用指数函数解决问题。因为游戏中概率低于0.5不一定失败，所以还需要用游戏模拟。（1-ps）m= 0.5
是临界点，m是m次方，表示跳过的台子数，最后的概率在0.5之上的m次数看做gr公式里面的B（ps是成功概率），总m次数看做B。

想想概率相同，怎么处理，概率不同怎么处理（根据初始的概率值表示选手的水平，每次都去随机生成概率？把选手的水平和jumper到下一个方块的距离当成权重随机生成跳到下一个台子上的概率）。

关于成功概率问题：
定时器timer1调用的时间（就那个450毫秒）就是，（自动生成的距离/对应方向上的加速）*成功的概率。
100%跳到台子上的时间 = （自动生成的距离/对应方向上的加速）

关于收集到数据之后分析数据的问题（留做下次讨论）：
一百次游戏以后的平均台子数和平均0.5以上台子数计算GR值。
根据数据表格以GR为y轴，玩家水平为X轴，找出GR值在0.07-0.08之间的数据来说明问题。
最后可以看看函数是什么样子，看看是不是随着玩家水平增加，函数的趋势。

--------------------------------------------------------------------------------

研究日志记录：

2019.9.16
	完成每次自动跳上台子，成功的概率是100%。
		思路：（9.18完成）
			得到下个台子到本台子之间的距离，以按下鼠标的时间去控制跳跃距离，
			这样，按下鼠标时间= 距离/在那个方向上的增量。
2019.9.18 and 2019.9.19
	程序加入成功概率模型。
		跳到下一个台子上成功的概率是根据以玩家水平为平均数的二项分布生成的随机概率。
		二项分布中出现问题：（1）方差应该是多少？暂定0.2。（2）最后是否四舍五入概率？暂时不舍。
		以此概率计算需要按下鼠标的时间。完成跳跃的模拟。（由于数据不理想，方法存疑应该是方差等参数或者算法不对）
		然后根据设计的表格记录数据。
		思路（解决以概率计算按鼠标时间的问题）：
			正态分布概率的得出相当于已经对跳跃过程进行了一次模拟，得到的是确切以玩家水平为参考的参数。
			将参数乘上距离，让玩家以为这次的距离就是这么远。但是前提是，时间计算必须能落到台子的中点上。
			参数为正就
			二项分布相当于已经对跳跃事件进行了一次模拟，避开了台子距离对难度的影响的考虑。比如跳之前玩家水平是90%，说明下一跳成功的
			概率就是0.9，虽然距离越大对玩家会有影响，但是对0.9的玩家影响小，0.9已经包含了台子对玩家的影响，所以二项分布随机出的参数
			可以当做这次实验的模拟估计。
		猜想：或者应该以台子距离为二项分布平均值，玩家水平影响标准差。
----------------------------------------------------------------------------------
程序日志记录：

2020.4.25
	目标： 根据论文研究内容做改进游戏的方法。
	目标描述：增加游戏难度，将程序改为名为能喵帮忙的puzzle game。 设计二，暂时待定为连跳给复活卡的方式。
		能喵帮忙描述：游戏从玩家跳跃一次之后开始要进行答题。
					玩家每跳跃一次都需要答题。答对问题可以获得正确的方向自己进行跳跃。
					答不对问题可以做选择，选择能喵帮跳还是电脑帮跳。
					能喵帮跳就是能喵总是知道正确的方向，但是不一定能跳得上下一个台子，
					电脑帮跳就是电脑总能跳到台子上，但是电脑选的方向可能会错。
		时间限制描述： 对游戏添加时间限制，先暂时定为110秒时间限制，看看每个级别玩家能跳多远，然后将距离带入算法1计算，时间固定，排除意外情况每次
					游戏长度应当也是固定的。所以可以看情况取游戏长度。
	实验过程：按照描述修改程序并且收集数据。 统计数据应该只需要做出玩家答错题目的情况即可。因为答对的情况与原来的跳一跳游戏无异，
			所以我们程序只模拟答错的情况。
	游戏过程设计：玩家一上来就答题，答对题，给出正确方向，自己跳。答错题就做选择能喵帮忙还是电脑帮忙，做出选择后确认，确认完就开始跳，我们暂时只模拟答错题的情况， 因为答对题跟原来的游戏没有区别。
